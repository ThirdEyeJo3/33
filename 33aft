// 33.sol - Smart contract based on Fibonacci sequence with added security features

pragma solidity ^0.8.0;

contract ThirtyThree {
    uint256 private constant FIBONACCI_PRECISION = 1000;
    uint256 private constant FIBONACCI_LENGTH = 100;

    uint256[FIBONACCI_LENGTH] private fibonacci;

    // Constructor
    constructor() {
        fibonacci[0] = 1;
        fibonacci[1] = 1;
        for (uint256 i = 2; i < FIBONACCI_LENGTH; i++) {
            fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
        }
    }

    function getFibonacci(uint256 n) public view returns (uint256) {
        require(n < FIBONACCI_PRECISION, "Input value is too large");

        uint256 fib = 1;
        uint256 prevFib = 1;

        for (uint256 i = 2; i <= n; i++) {
            uint256 temp = fib;
            fib = fib + prevFib;
            prevFib = temp;
        }

        return fib;
    }

    // Security functions
    function selfDestruct() public {
        require(msg.sender == tx.origin, "Contract can only be destroyed by its creator");
        selfdestruct(payable(msg.sender));
    }

    function withdraw() public {
        require(msg.sender == tx.origin, "Withdrawals can only be made by contract creator");
        msg.sender.transfer(address(this).balance);
    }
}
